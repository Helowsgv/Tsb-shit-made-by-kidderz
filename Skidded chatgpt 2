--// Script 1: death counter notif

-- Death Counter Notifier with Highlight Integration (Persistent after Respawn)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

-- UI setup function
local function createUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "DeathCounterNotifierGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local notificationFrame = Instance.new("Frame")
    notificationFrame.Name = "NotificationFrame"
    notificationFrame.Size = UDim2.new(0, 250, 0, 100)
    notificationFrame.Position = UDim2.new(1, -260, 1, -110)
    notificationFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    notificationFrame.BackgroundTransparency = 0.3
    notificationFrame.BorderSizePixel = 0
    notificationFrame.Visible = false
    notificationFrame.Parent = screenGui

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0.4, 0)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "Death Counter Detected"
    titleLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextScaled = true
    titleLabel.Parent = notificationFrame

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 0.6, 0)
    nameLabel.Position = UDim2.new(0, 0, 0.4, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = ""
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.Font = Enum.Font.Gotham
    nameLabel.TextScaled = true
    nameLabel.Parent = notificationFrame

    return screenGui, notificationFrame, nameLabel
end

local screenGui, notificationFrame, nameLabel = createUI()

-- Improved highlight using Roblox Highlight object
local highlightInstances = {}

local function updateHighlight(model, state)
    if not highlightInstances[model] and state then
        local highlight = Instance.new("Highlight")
        highlight.Name = "DeathCounterHighlight"
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Adornee = model
        highlight.Parent = model
        highlightInstances[model] = highlight
    elseif highlightInstances[model] and not state then
        highlightInstances[model]:Destroy()
        highlightInstances[model] = nil
    end
end

local function monitorDeathCounters()
    RunService.RenderStepped:Connect(function()
        local found = false
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                local model = Workspace:FindFirstChild("Live") and Workspace.Live:FindFirstChild(player.Name)
                if model then
                    local hasCounter = model:FindFirstChild("Counter") ~= nil
                    updateHighlight(model, hasCounter)

                    if hasCounter then
                        found = true
                        notificationFrame.Visible = true
                        nameLabel.Text = player.Name
                    end
                end
            end
        end

        if not found then
            notificationFrame.Visible = false
            nameLabel.Text = ""
        end
    end)
end

-- Initial start and persistent respawn connection
monitorDeathCounters()

LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1) -- wait to ensure GUI and workspace are fully ready
    screenGui:Destroy()
    screenGui, notificationFrame, nameLabel = createUI()
end)

--// Script 2: Noclik when garo parre

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local localPlayer = Players.LocalPlayer

-- Function to check if M1 is allowed
local function isM1Blocked()
	local success, result = pcall(function()
		local live = workspace:FindFirstChild("Live")
		local playerData = live and live:FindFirstChild(localPlayer.Name)
		if not playerData then return false end

		local attr = playerData:GetAttribute("LastM1Hitted")
		if not attr then return false end

		local targetName = string.split(attr, ";;")[1]
		local target = live:FindFirstChild(targetName)
		if not target then return false end

		return target:FindFirstChild("HunterCounter") ~= nil
	end)
	return success and result
end

-- Intercept M1 clicks
local function onInput(actionName, inputState, inputObject)
	if inputState == Enum.UserInputState.Begin and inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
		if isM1Blocked() then
			warn("M1 blocked: LastM1Hitted has HunterCounter!")
			return Enum.ContextActionResult.Sink -- block the input
		end
	end
	return Enum.ContextActionResult.Pass
end

-- Bind the M1 block
ContextActionService:BindAction("BlockM1IfHunterCounter", onInput, false, Enum.UserInputType.MouseButton1)
