--// Script 1: death counter notif

-- Death Counter Notifier with Highlight Integration (Persistent after Respawn)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

-- UI setup function
local function createUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "DeathCounterNotifierGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local notificationFrame = Instance.new("Frame")
    notificationFrame.Name = "NotificationFrame"
    notificationFrame.Size = UDim2.new(0, 250, 0, 100)
    notificationFrame.Position = UDim2.new(1, -260, 1, -110)
    notificationFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    notificationFrame.BackgroundTransparency = 0.3
    notificationFrame.BorderSizePixel = 0
    notificationFrame.Visible = false
    notificationFrame.Parent = screenGui

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0.4, 0)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "Death Counter Detected"
    titleLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextScaled = true
    titleLabel.Parent = notificationFrame

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 0.6, 0)
    nameLabel.Position = UDim2.new(0, 0, 0.4, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = ""
    nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    nameLabel.Font = Enum.Font.Gotham
    nameLabel.TextScaled = true
    nameLabel.Parent = notificationFrame

    return screenGui, notificationFrame, nameLabel
end

local screenGui, notificationFrame, nameLabel = createUI()

-- Improved highlight using Roblox Highlight object
local highlightInstances = {}

local function updateHighlight(model, state)
    if not highlightInstances[model] and state then
        local highlight = Instance.new("Highlight")
        highlight.Name = "DeathCounterHighlight"
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Adornee = model
        highlight.Parent = model
        highlightInstances[model] = highlight
    elseif highlightInstances[model] and not state then
        highlightInstances[model]:Destroy()
        highlightInstances[model] = nil
    end
end

local function monitorDeathCounters()
    RunService.RenderStepped:Connect(function()
        local found = false
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                local model = Workspace:FindFirstChild("Live") and Workspace.Live:FindFirstChild(player.Name)
                if model then
                    local hasCounter = model:FindFirstChild("Counter") ~= nil
                    updateHighlight(model, hasCounter)

                    if hasCounter then
                        found = true
                        notificationFrame.Visible = true
                        nameLabel.Text = player.Name
                    end
                end
            end
        end

        if not found then
            notificationFrame.Visible = false
            nameLabel.Text = ""
        end
    end)
end

-- Initial start and persistent respawn connection
monitorDeathCounters()

LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1) -- wait to ensure GUI and workspace are fully ready
    screenGui:Destroy()
    screenGui, notificationFrame, nameLabel = createUI()
end)

--// Script 2: Noclik when garo parre

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local localPlayer = Players.LocalPlayer
local queuedClick = false
local counterStartTime = 0
local counterDuration = 0.705
local lastTargetName = nil

-- Get target if it has HunterCounter
local function getCounterTarget()
	local success, result = pcall(function()
		local live = workspace:FindFirstChild("Live")
		local playerData = live and live:FindFirstChild(localPlayer.Name)
		if not playerData then return nil end

		local attr = playerData:GetAttribute("LastM1Hitted")
		if not attr then return nil end

		local name = string.split(attr, ";;")[1]
		local target = live:FindFirstChild(name)
		if not target then return nil end

		if target:FindFirstChild("HunterCounter") then
			return target, name
		end

		return nil
	end)
	if success then return result end
end

-- Handle M1 click input
local function onInput(actionName, inputState, inputObject)
	if inputState == Enum.UserInputState.Begin and inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
		local target, name = getCounterTarget()
		if target then
			if not queuedClick then
				counterStartTime = tick()
				queuedClick = true
				lastTargetName = name
				warn("M1 queued due to HunterCounter")
			end
			return Enum.ContextActionResult.Sink
		end
	end
	return Enum.ContextActionResult.Pass
end

-- Monitor queue and release click at perfect time
RunService.RenderStepped:Connect(function()
	if queuedClick and lastTargetName then
		local live = workspace:FindFirstChild("Live")
		local target = live and live:FindFirstChild(lastTargetName)

		-- If counter disappeared or time passed, fire click
		local stillHasCounter = target and target:FindFirstChild("HunterCounter")
		if tick() - counterStartTime >= counterDuration or not stillHasCounter then
			queuedClick = false
			lastTargetName = nil
			VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
			VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
			warn("M1 auto-fired at end of HunterCounter")
		end
	end
end)

-- Bind input blocking
ContextActionService:BindAction("BlockM1IfHunterCounter", onInput, false, Enum.UserInputType.MouseButton1)


--// Script 3: Blocking

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Config
local MAX_DISTANCE = 30
local SMOOTHNESS = 0.20
local MAX_VELOCITY = 100

local DEFAULT_PREDICT_TIME = 0.3
local RUN_PREDICT_TIME = 0.1
local DASH_PREDICT_TIME = 0.4

-- State
local isRagdolled = false
local hasTarget = false
local scriptActive = true

-- ✅ GUI Checkmark
local function createCheckmark()
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "BlockCheckGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = player:WaitForChild("PlayerGui")

	local label = Instance.new("TextLabel")
	label.Name = "BlockIndicator"
	label.Size = UDim2.new(0, 120, 0, 35)
	label.Position = UDim2.new(0, 10, 0, 10)
	label.BackgroundTransparency = 1
	label.Text = "🛡️ Blocking"
	label.TextColor3 = Color3.fromRGB(0, 255, 0)
	label.TextScaled = true
	label.Visible = false
	label.Parent = screenGui

	return label
end

local blockIndicator = createCheckmark()

-- Helpers
local function getLiveModel()
	local live = Workspace:FindFirstChild("Live")
	return live and live:FindFirstChild(player.Name)
end

local function isBlocking()
	if not scriptActive then return false end
	local live = getLiveModel()
	local value = live and live:GetAttribute("Blocking")
	blockIndicator.Visible = value == true
	return value == true
end

local function isAlive()
	return humanoid and humanoid.Health > 0
end

local function getNearestHumanoid()
	if not scriptActive then return nil end
	local liveFolder = Workspace:FindFirstChild("Live")
	if not liveFolder then return nil end

	local closest = nil
	local shortest = MAX_DISTANCE

	for _, model in pairs(liveFolder:GetChildren()) do
		if model:IsA("Model") and model.Name ~= player.Name then
			local h = model:FindFirstChild("Humanoid")
			local r = model:FindFirstChild("HumanoidRootPart")
			if h and r then
				local dist = (rootPart.Position - r.Position).Magnitude
				if dist <= shortest then
					shortest = dist
					closest = model
				end
			end
		end
	end

	return closest
end

-- 🔁 Frame Update
RunService.RenderStepped:Connect(function()
	if not scriptActive or not isAlive() then
		if humanoid then humanoid.AutoRotate = false end
		if blockIndicator then blockIndicator.Visible = false end
		return
	end

	local blocking = isBlocking()
	if not blocking then
		humanoid.AutoRotate = true
		blockIndicator.Visible = false
		return
	end

	local target = getNearestHumanoid()
	if not target then
		if hasTarget then
			humanoid.AutoRotate = true
			hasTarget = false
		end
		return
	end

	local targetRoot = target:FindFirstChild("HumanoidRootPart")
	if not targetRoot then return end

	hasTarget = true
	humanoid.AutoRotate = false

	local velocity = targetRoot.Velocity
	if velocity.Magnitude > MAX_VELOCITY then
		velocity = Vector3.zero
	end

	local predictionTime = DEFAULT_PREDICT_TIME
	local smoothness = SMOOTHNESS

	local liveTarget = Workspace:FindFirstChild("Live") and Workspace.Live:FindFirstChild(target.Name)
	if liveTarget then
		if liveTarget:GetAttribute("_JustDashed") ~= nil then
			predictionTime = DASH_PREDICT_TIME
			smoothness = 0
		elseif liveTarget:GetAttribute("Running") == true then
			predictionTime = RUN_PREDICT_TIME
		end
	end

	local predictedPos = targetRoot.Position + (velocity * predictionTime)
	local lookAtPos = Vector3.new(predictedPos.X, rootPart.Position.Y, predictedPos.Z)
	local desired = CFrame.lookAt(rootPart.Position, lookAtPos)
	rootPart.CFrame = rootPart.CFrame:Lerp(desired, smoothness)
end)

-- 🔐 Ragdoll Control
local function updateRagdollState(ragdollPresent)
	isRagdolled = ragdollPresent
	scriptActive = not ragdollPresent

	if not scriptActive then
		if humanoid then humanoid.AutoRotate = false end
		if blockIndicator then blockIndicator.Visible = false end
	end
end

-- 👀 Watch for Ragdoll
local function setupRagdollWatcher()
	local live = getLiveModel()
	if not live then return end

	updateRagdollState(live:FindFirstChild("Ragdoll") ~= nil)

	live.ChildAdded:Connect(function(child)
		if child.Name == "Ragdoll" then
			updateRagdollState(true)
		end
	end)

	live.ChildRemoved:Connect(function(child)
		if child.Name == "Ragdoll" then
			updateRagdollState(false)
		end
	end)
end

-- 🧍 Respawn Support (fix stuck facing old direction)
player.CharacterAdded:Connect(function(char)
	character = char
	humanoid = character:WaitForChild("Humanoid")
	rootPart = character:WaitForChild("HumanoidRootPart")

	-- 🧼 Reset state
	hasTarget = false
	scriptActive = true
	isRagdolled = false

	if humanoid then
		humanoid.AutoRotate = true -- ✅ Let player rotate again
	end

	if blockIndicator then
		blockIndicator.Visible = false
	end

	-- Re-setup ragdoll watcher
	task.delay(0.5, function()
		setupRagdollWatcher()
	end)
end)

-- Initial ragdoll watcher setup
task.spawn(function()
	repeat task.wait() until getLiveModel()
	setupRagdollWatcher()
end)


--// Script 4: Dashers

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Create GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "QClickGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

-- Create Button
local button = Instance.new("TextButton")
button.Name = "QButton"
button.Size = UDim2.new(0, 40, 0, 40)
button.Position = UDim2.new(1, -50, 0.5, -20)
button.BackgroundColor3 = Color3.new(0, 0, 0)
button.TextColor3 = Color3.new(1, 1, 1)
button.Text = "Q"
button.Active = true
button.Draggable = true
button.Parent = screenGui

-- Function to simulate Q press
local function simulateQ()
    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Q, false, game)
    VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Q, false, game)
end

-- Click GUI to simulate Q
button.MouseButton1Click:Connect(simulateQ)

-- Spam Q while E is held
local spamming = false

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.E and not spamming then
        spamming = true
        task.spawn(function()
            while spamming do
                simulateQ()
                task.wait(0.05) -- 20 Qs per second
            end
        end)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.E then
        spamming = false
    end
end)


--// Script 5: dash reset

local plr = game:GetService("Players").LocalPlayer
local uis = game:GetService("UserInputService")
local stgui = game:GetService("StarterGui")

local activated = false

local frontDashArgs = {
	[1] = {
		["Dash"] = Enum.KeyCode.W,
		["Key"] = Enum.KeyCode.Q,
		["Goal"] = "KeyPress"
	}
}

local function frontDash()
	if plr.Character and plr.Character:FindFirstChild("Communicate") then
		plr.Character.Communicate:FireServer(unpack(frontDashArgs))
	end
end

local function noEndlagSetup(char)
	uis.InputBegan:Connect(function(input, t)
		if not activated or t then return end
		if input.KeyCode == Enum.KeyCode.Q and not uis:IsKeyDown(Enum.KeyCode.D)
			and not uis:IsKeyDown(Enum.KeyCode.A)
			and not uis:IsKeyDown(Enum.KeyCode.S)
			and char:FindFirstChild("UsedDash") then
			frontDash()
		end
	end)
end

local function stopAnimation(char, animationId)
	local humanoid = char:FindFirstChildWhichIsA("Humanoid")
	if humanoid then
		local animator = humanoid:FindFirstChildWhichIsA("Animator")
		if animator then
			for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
				if track.Animation and track.Animation.AnimationId == "rbxassetid://" .. tostring(animationId) then
					track:Stop()
				end
			end
		end
	end
end

local function isAnimationRunning(char, animationId)
	local humanoid = char:FindFirstChildWhichIsA("Humanoid")
	if humanoid then
		local animator = humanoid:FindFirstChildWhichIsA("Animator")
		if animator then
			for _, track in ipairs(animator:GetPlayingAnimationTracks()) do
				if track.Animation and track.Animation.AnimationId == "rbxassetid://" .. tostring(animationId) then
					return true
				end
			end
		end
	end
	return false
end

local function emoteDashSetup(char)
	local hrp = char:WaitForChild("HumanoidRootPart")
	uis.InputBegan:Connect(function(input, t)
		if not activated or t then return end

		if input.KeyCode == Enum.KeyCode.Q
			and not uis:IsKeyDown(Enum.KeyCode.W)
			and not uis:IsKeyDown(Enum.KeyCode.S)
			and not isAnimationRunning(char, 10491993682) then
			local vel = hrp:FindFirstChild("dodgevelocity")
			if vel then
				vel:Destroy()
				stopAnimation(char, 10480793962) -- side dash right
				stopAnimation(char, 10480796021) -- side dash left
			end
		end
	end)
end

local function fullSetup(char)
	noEndlagSetup(char)
	emoteDashSetup(char)
	noEndlagSetup(char) -- run twice like before
	emoteDashSetup(char)
end

-- 🔘 Activate only on `-` key press
uis.InputBegan:Connect(function(input, gpe)
	if gpe then return end
	if input.KeyCode == Enum.KeyCode.Minus and not activated then
		activated = true

		if plr.Character then
			fullSetup(plr.Character)
		end

		plr.CharacterAdded:Connect(fullSetup)

		stgui:SetCore("SendNotification", {
			Title = "✅ Activated",
			Text = "Dash mod is now running.",
			Duration = 3
		})
	end
end)


--// Script 6: auto



--// Script 7: Copy avatar

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local hairRemovedThisLife = false

-- ✅ Remove FakeHead hair once per life
local function removeFakeHeadHairOnce()
	if hairRemovedThisLife then return end

	local live = Workspace:FindFirstChild("Live")
	if not live then return end

	local myModel = live:FindFirstChild(LocalPlayer.Name)
	if not myModel then return end

	local fakeHead = myModel:FindFirstChild("FakeHead")
	if not fakeHead then return end

	for _, obj in ipairs(fakeHead:GetChildren()) do
		if obj:IsA("Accessory") or obj:IsA("Instance") then
			if obj.Name:lower():find("hair") then
				obj:Destroy()
			end
		end
	end

	hairRemovedThisLife = true
end

-- 🧼 Clear current avatar
local function clearCharacter()
	local character = LocalPlayer.Character
	if not character then return end

	for _, item in ipairs(character:GetChildren()) do
		if item:IsA("Accessory") or item:IsA("Shirt") or item:IsA("Pants")
			or item:IsA("CharacterMesh") or item:IsA("BodyColors") or item:IsA("Decal") then
			item:Destroy()
		end
	end

	removeFakeHeadHairOnce()
end

-- 🧩 Weld accessories
local function weldAccessory(accessory, character)
	local handle = accessory:FindFirstChild("Handle")
	if not handle then return end

	for _, part in ipairs(character:GetDescendants()) do
		if part:IsA("Attachment") and handle:FindFirstChild(part.Name) then
			local weld = Instance.new("Weld")
			weld.Part0 = part.Parent
			weld.Part1 = handle
			weld.C0 = part.CFrame
			weld.C1 = handle[part.Name].CFrame
			weld.Parent = handle
			accessory.Parent = character
			return
		end
	end

	accessory.Parent = character
end

-- 👕 Apply copied avatar appearance
local function applyAppearance(model)
	local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	clearCharacter()

	for _, item in ipairs(model:GetChildren()) do
		if item:IsA("Accessory") then
			weldAccessory(item:Clone(), character)
		elseif item:IsA("Shirt") or item:IsA("Pants") or item:IsA("BodyColors") then
			item:Clone().Parent = character
		elseif item:IsA("CharacterMesh") then
			item:Clone().Parent = character
		elseif item:IsA("Decal") and item.Name == "face" then
			local head = character:FindFirstChild("Head")
			if head then
				local face = head:FindFirstChild("face")
				if face then face:Destroy() end
				item:Clone().Parent = head
			end
		end
	end

	StarterGui:SetCore("ChatMakeSystemMessage", {
		Text = "✅ Avatar applied!";
		Color = Color3.fromRGB(0, 255, 0);
		Font = Enum.Font.SourceSansBold;
		FontSize = Enum.FontSize.Size24;
	})
end

-- 📦 Load and apply avatar by UserId
local function loadAndApplyAvatar(userId)
	print("🔄 Loading avatar for UserId:", userId)

	local success, modelOrErr = pcall(function()
		return Players:GetCharacterAppearanceAsync(userId)
	end)

	if success and modelOrErr then
		applyAppearance(modelOrErr)
	else
		warn("❌ Failed to load avatar:", modelOrErr)
	end
end

-- 🔁 Reset hair flag per respawn
LocalPlayer.CharacterAdded:Connect(function()
	task.wait(1)
	hairRemovedThisLife = false
end)

-- 🖥 GUI Setup (small, bottom-left, black, gray text)
local screenGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
screenGui.Name = "AvatarGui"
screenGui.ResetOnSpawn = false

local frame = Instance.new("Frame", screenGui)
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.Size = UDim2.new(0, 85, 0, 22) -- 👈 smaller frame
frame.Position = UDim2.new(0, 10, 1, -30)
frame.BorderSizePixel = 0

local textBox = Instance.new("TextBox", frame)
textBox.PlaceholderText = "UserId"
textBox.Size = UDim2.new(1, -6, 1, -6)
textBox.Position = UDim2.new(0, 3, 0, 3)
textBox.BackgroundColor3 = Color3.new(0, 0, 0) -- black textbox
textBox.TextColor3 = Color3.fromRGB(160, 160, 160) -- gray text
textBox.ClearTextOnFocus = false
textBox.TextScaled = true
textBox.Font = Enum.Font.SourceSans
textBox.Text = ""

-- 🔂 Press enter to apply
textBox.FocusLost:Connect(function(enterPressed)
	if enterPressed then
		local id = tonumber(textBox.Text)
		if id then
			loadAndApplyAvatar(id)
		else
			StarterGui:SetCore("ChatMakeSystemMessage", {
				Text = "⚠️ Invalid UserId!";
				Color = Color3.fromRGB(255, 100, 100);
				Font = Enum.Font.SourceSansBold;
				FontSize = Enum.FontSize.Size24;
			})
		end
	end
end)

-- 🎯 Press `'` to focus textbox
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.Quote then -- `Quote` is the `'` key
		if not textBox:IsFocused() then
			textBox:CaptureFocus()
		end
	end
end)


--// Script 8: forward


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local lastM1ingExists = false
local SAFE_DISTANCE = 6 -- max distance to check for enemies

-- ✅ Move forward by 0.5 studs
local function moveForwardHalfStud()
	if not hrp then return end
	hrp.CFrame = hrp.CFrame + hrp.CFrame.LookVector.Unit * 0.5
end

-- ❌ Prevents moving if enemy is too close
local function isTooCloseToEnemy()
	local liveFolder = Workspace:FindFirstChild("Live")
	if not liveFolder then return false end

	for _, model in ipairs(liveFolder:GetChildren()) do
		if model:IsA("Model") and model.Name ~= player.Name then
			local enemyHRP = model:FindFirstChild("HumanoidRootPart")
			if enemyHRP then
				local distance = (hrp.Position - enemyHRP.Position).Magnitude
				if distance <= SAFE_DISTANCE then
					return true
				end
			end
		end
	end

	return false
end

-- 🔁 Update every frame
RunService.RenderStepped:Connect(function()
	local liveFolder = Workspace:FindFirstChild("Live")
	if not liveFolder then return end

	local myModel = liveFolder:FindFirstChild(player.Name)
	if not myModel then return end

	local m1ingExists = myModel:FindFirstChild("M1ing") ~= nil

	if m1ingExists and not lastM1ingExists and not isTooCloseToEnemy() then
		moveForwardHalfStud()
	end

	lastM1ingExists = m1ingExists
end)

-- ♻️ On respawn
player.CharacterAdded:Connect(function(char)
	character = char
	hrp = character:WaitForChild("HumanoidRootPart")
	lastM1ingExists = false
end)

--// Script 9: Kill sound

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local SoundService = game:GetService("SoundService")
local Debris = game:GetService("Debris")

local localPlayer = Players.LocalPlayer
local playerName = localPlayer.Name
local liveFolder = Workspace:WaitForChild("Live")

local lastDamageValue = 0
local killSoundOnCooldown = false
local recentlyKilled = {}

-- 🔊 Kill Sound
local function playKillSound()
	local s = Instance.new("Sound")
	s.SoundId = "rbxassetid://131961137" -- Replace with your sound
	s.Volume = 1
	s.Parent = SoundService
	s:Play()
	Debris:AddItem(s, 5)

	-- Start global cooldown (3 seconds)
	killSoundOnCooldown = true
	task.delay(3, function()
		killSoundOnCooldown = false
	end)
end

-- ♻️ Reset per-target kill flag
local function watchTargetRespawn(model)
	local name = model.Name
	if recentlyKilled[name] == "watching" then return end
	recentlyKilled[name] = "watching"

	local hum = model:FindFirstChildWhichIsA("Humanoid")
	if hum then
		hum.Died:Connect(function()
			task.delay(1.5, function()
				recentlyKilled[name] = nil
				warn("♻️ Reset kill flag for: " .. name)
			end)
		end)
	end

	model.ChildRemoved:Connect(function(child)
		if child:IsA("Humanoid") then
			recentlyKilled[name] = nil
			warn("♻️ Humanoid removed for: " .. name)
		end
	end)
end

-- 🔁 Main kill detection loop
RunService.Heartbeat:Connect(function()
	local myModel = liveFolder:FindFirstChild(playerName)
	if not myModel then return end

	local fullValue = myModel:GetAttribute("LastM1Hitted")
	local currentDamage = myModel:GetAttribute("LastDamageDone")

	local targetName
	if fullValue then
		local parts = string.split(fullValue, ";;")
		targetName = parts[1]
	end

	if targetName and currentDamage and currentDamage ~= lastDamageValue then
		local targetModel = liveFolder:FindFirstChild(targetName)
		if not targetModel then return end

		local humanoid = targetModel:FindFirstChildWhichIsA("Humanoid")
		local lastHit = targetModel:GetAttribute("LastHit")

		if lastHit == playerName and humanoid and humanoid.Health <= 0 then
			if not killSoundOnCooldown and recentlyKilled[targetName] ~= true then
				playKillSound()
				warn("✅ Kill sound played for:", targetName)
				recentlyKilled[targetName] = true
				watchTargetRespawn(targetModel)
			else
				warn("⏳ Kill sound blocked (cooldown or already played) for:", targetName)
			end
		end
	end

	lastDamageValue = currentDamage
end)

-- 🔄 Reset local state on respawn
localPlayer.CharacterAdded:Connect(function()
	lastDamageValue = 0
	recentlyKilled = {}
	killSoundOnCooldown = false
end)

--// Script 10: spawn sound

local Players = game:GetService("Players")
local SoundService = game:GetService("SoundService")
local Debris = game:GetService("Debris")

local localPlayer = Players.LocalPlayer
local spawnedOnce = false
local SOUND_ID = "rbxassetid://74137849180601"

-- 🔊 Play the spawn sound
local function playRespawnSound()
	local s = Instance.new("Sound")
	s.SoundId = SOUND_ID
	s.Volume = 1
	s.Parent = SoundService
	s:Play()
	Debris:AddItem(s, 10)
end

-- 🔁 On character spawn
localPlayer.CharacterAdded:Connect(function()
	if spawnedOnce then
		playRespawnSound()
	else
		spawnedOnce = true -- first time spawn, don't play yet
	end
end)


--// Script 11: Backdash skillz

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- CONFIG
local MAX_DISTANCE = 30
local SLOWED_TIMEOUT = 0.6
local STARE_DURATION = 0.5 -- 🔧 Staring duration for all TRUE combos

-- STATE
local isSHeld = false
local isRagdolled = false
local trueComboTriggered = false
local staringUntil = 0

-- 🔍 Find nearest target
local function getNearestTarget()
	local live = Workspace:FindFirstChild("Live")
	if not live then return nil end

	local closest, shortest = nil, MAX_DISTANCE

	for _, model in ipairs(live:GetChildren()) do
		if model:IsA("Model") and model.Name ~= player.Name then
			local hrp = model:FindFirstChild("HumanoidRootPart")
			if hrp then
				local dist = (rootPart.Position - hrp.Position).Magnitude
				if dist < shortest then
					shortest = dist
					closest = hrp
				end
			end
		end
	end

	return closest
end

-- 🟢 Simulate Q press
local function pressQ()
	VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Q, false, game)
	task.wait(0.05)
	VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Q, false, game)
end

-- 🧠 Slowed Checker
local function getLiveModel()
	local live = Workspace:FindFirstChild("Live")
	return live and live:FindFirstChild(player.Name)
end

local function hasSlowed()
	local model = getLiveModel()
	return model and model:FindFirstChild("Slowed") ~= nil
end

local function waitForSlowed(timeout)
	local elapsed = 0
	while elapsed < timeout do
		if hasSlowed() then return true end
		task.wait(0.05)
		elapsed += 0.05
	end
	return false
end

-- 👀 Ragdoll Watcher
local function updateRagdollState(state)
	isRagdolled = state
end

local function setupRagdollWatcher()
	local live = getLiveModel()
	if not live then return end

	updateRagdollState(live:FindFirstChild("Ragdoll") ~= nil)

	live.ChildAdded:Connect(function(child)
		if child.Name == "Ragdoll" then
			updateRagdollState(true)
		end
	end)

	live.ChildRemoved:Connect(function(child)
		if child.Name == "Ragdoll" then
			updateRagdollState(false)
		end
	end)
end

-- 🎮 Key Input: S + 1–4 triggers Q and checks for "true" combo
UserInputService.InputBegan:Connect(function(input, processed)
	if processed then return end

	if input.KeyCode == Enum.KeyCode.S then
		isSHeld = true
	end

	local numberKeys = {
		[Enum.KeyCode.One] = true,
		[Enum.KeyCode.Two] = true,
		[Enum.KeyCode.Three] = true,
		[Enum.KeyCode.Four] = true,
	}

	if numberKeys[input.KeyCode] and isSHeld then
		pressQ()

		task.spawn(function()
			trueComboTriggered = false
			if waitForSlowed(SLOWED_TIMEOUT) then
				trueComboTriggered = true
				staringUntil = tick() + STARE_DURATION
			end
		end)
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.S then
		isSHeld = false
	end
end)

-- ♻️ Respawn handler
player.CharacterAdded:Connect(function(char)
	character = char
	humanoid = character:WaitForChild("Humanoid")
	rootPart = character:WaitForChild("HumanoidRootPart")
	isSHeld = false
	isRagdolled = false
	task.delay(0.5, setupRagdollWatcher)
end)

-- 🔄 Instantly face nearest enemy horizontally when in stare window
RunService.RenderStepped:Connect(function()
	if tick() > staringUntil then return end

	local target = getNearestTarget()
	if not target then return end

	local selfPos = rootPart.Position
	local targetPos = Vector3.new(target.Position.X, selfPos.Y, target.Position.Z)
	rootPart.CFrame = CFrame.new(selfPos, targetPos)
end)

-- Initial setup
task.spawn(function()
	repeat task.wait() until getLiveModel()
	setupRagdollWatcher()
end)


--// Script 12: Auto Upper+grasp



